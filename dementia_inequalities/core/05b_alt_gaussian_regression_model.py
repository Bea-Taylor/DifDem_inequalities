# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/core/05b_alt_gaussian_regression_model.ipynb.

# %% auto 0
__all__ = ['df_dem_plus', 'log_likelihood', 'log_prior', 'log_posterior', 'metropolis_hastings']

# %% ../../nbs/core/05b_alt_gaussian_regression_model.ipynb 4
import dementia_inequalities as proj 
from .. import const, log, utils, tools 
import adu_proj.utils as adutils 

# %% ../../nbs/core/05b_alt_gaussian_regression_model.ipynb 5
import numpy as np 
import pandas as pd
from matplotlib import pyplot as plt

from scipy.stats import norm 


# %% ../../nbs/core/05b_alt_gaussian_regression_model.ipynb 8
# Define the log likelihood function for linear regression with normal error
def log_likelihood(params, X, y):
    beta_0 = params[0]
    beta = params[1:-2]
    mu = params[-2]
    sigma = params[-1]

    y_pred = np.dot(X, beta) + beta_0 
    y_diff = y_pred.squeeze()-y
    likelihood = norm.pdf(x=y_diff, loc=mu, scale=sigma)
    
    return np.sum(np.log(likelihood))

# Define the prior distribution for beta parameters, mu, and sigma
def log_prior(params):
    beta_0 = params[0]
    beta = params[1:-2]
    mu = params[-2]
    sigma = params[-1]
    if all(-1 < b < 1 for b in beta) and 0 <= beta_0 < 1 and 0 < mu < 1 and 0 < sigma < 1 :
    #if all(-5 < b < 5 for b in beta) and 0 <= beta_0 < 5 and 0 < mu < 5 and 0 < sigma :
    #if all(-5 < b < 5 for b in beta) and 0 <= beta_0 < 5 and -5 < mu < 0 and 0 < sigma :
        return 0
    return -np.inf

# Define the log posterior distribution
def log_posterior(params, X, y):
    return log_likelihood(params, X, y) + log_prior(params)

# Define the Metropolis-Hastings algorithm
def metropolis_hastings(initial_params, proposal_sd, n_iter, X, y):
    params = initial_params
    accepted_params = [params]
    accepted_post = [log_posterior(params, X, y)]
    for _ in range(n_iter):
        proposed_params = params + np.random.normal(scale=proposal_sd, size=params.shape)
        log_alpha = log_posterior(proposed_params, X, y) - log_posterior(params, X, y)
        if np.log(np.random.rand()) < log_alpha:
            params = proposed_params
        accepted_params.append(params)
        accepted_post.append(log_posterior(params, X, y))
    return np.array(accepted_params), np.array(accepted_post)

# %% ../../nbs/core/05b_alt_gaussian_regression_model.ipynb 15
df_dem_plus = pd.read_csv(const.output_path+'/df_dem_plus.csv')

df_dem_plus.head()
