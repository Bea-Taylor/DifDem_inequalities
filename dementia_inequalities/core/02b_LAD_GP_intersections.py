# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/core/02b_LAD_and_GP_intersections.ipynb.

# %% auto 0
__all__ = ['gdf_LAD', 'gdf_catchment', 'population_data_path', 'df_pop', 'N_intersections', 'LAD_GP_catchment_area_intersections',
           'GP_xs', 'GP_ys', 'df_LAD_GP_pop', 'flatten_comprehension']

# %% ../../nbs/core/02b_LAD_and_GP_intersections.ipynb 4
import dementia_inequalities as proj
from .. import const, log, utils, tools
import adu_proj.utils as adutils

# %% ../../nbs/core/02b_LAD_and_GP_intersections.ipynb 5
import numpy as np
import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt
import os,glob

# %% ../../nbs/core/02b_LAD_and_GP_intersections.ipynb 8
# Load geojson files of LAD boundaries
gdf_LAD = gpd.read_file(const.data_path+'/LAD_area/LAD_Dec_2021_GB_BFC_2022_-8975151699474964544.geojson')

# Remove Wales :( 
gdf_LAD = gdf_LAD.drop(gdf_LAD[gdf_LAD['LAD21CD'].str.startswith('W')].index)


# %% ../../nbs/core/02b_LAD_and_GP_intersections.ipynb 9
# Load geojson files of GP catchment areas 
gdf_catchment = gpd.read_file(const.data_path+'/Catchment Area/A81001.geojson')
for filename in glob.glob(os.path.join(const.data_path+'/Catchment Area/', '*.geojson')):
  gdf_catchment = pd.concat([gdf_catchment, gpd.read_file(filename)])

gdf_catchment.rename(columns={'name': 'Name'}, inplace=True)
# get rid of those whose surgeries are un-named
gdf_catchment = gdf_catchment[gdf_catchment['Name'].notna()]

# get rid of duplicated surgeries
gdf_catchment = gdf_catchment.drop_duplicates()

# tidy gp catchment area dataframe 
gdf_catchment.reset_index(inplace=True)

# %% ../../nbs/core/02b_LAD_and_GP_intersections.ipynb 10
# Population of LADs
population_data_path = const.output_path + '/LAD_age_2021.csv'
df_pop = pd.read_csv(population_data_path)
df_pop = df_pop[['LAD_name', 'all_age']]

# Add population
gdf_LAD = gdf_LAD.merge(df_pop, left_on='LAD21NM', right_on='LAD_name')

# %% ../../nbs/core/02b_LAD_and_GP_intersections.ipynb 11
# Change the crs so match across datasets 
gdf_catchment = gdf_catchment.to_crs(epsg=3857)
gdf_LAD = gdf_LAD.to_crs(epsg=3857)

# %% ../../nbs/core/02b_LAD_and_GP_intersections.ipynb 17
# Drop the worst areas 
gdf_catchment = gdf_catchment.drop([948, 947, 946, 7138])

# reset the index 
gdf_catchment.reset_index(inplace=True)
gdf_catchment.drop(columns=['level_0', 'index'], inplace=True)

# %% ../../nbs/core/02b_LAD_and_GP_intersections.ipynb 23
###### my version ######

# Compute intersections between LADs and GP catchment areas
N_intersections = 100

gdf_catchment['area'] = gdf_catchment.area / 1000000
gdf_LAD['area'] = gdf_LAD.area / 1000000

LAD_GP_catchment_area_intersections = []

GP_xs = np.array(gdf_catchment['geometry'].centroid.x)
GP_ys = np.array(gdf_catchment['geometry'].centroid.y)

for i, LAD_row in gdf_LAD.iterrows():
    
    LAD_center = LAD_row.geometry.centroid
    dx = GP_xs - LAD_center.x
    dy = GP_ys - LAD_center.y
    dists = np.sqrt(dx**2 + dy**2)
    closest_GPs = gdf_catchment.index[dists.argsort()[:N_intersections]]
    
    inters = []
    _intersection_areas = []
    for j in closest_GPs:
        inter = gdf_catchment.loc[j].geometry.buffer(0).intersection(LAD_row.geometry).area
        inter = inter / 1000000
        inters.append(inter)
        if inter != 0:
            _intersection_areas.append([j, inter])
            
    LAD_GP_catchment_area_intersections.append(_intersection_areas)
    

# %% ../../nbs/core/02b_LAD_and_GP_intersections.ipynb 29
###### my version ######

# Calculate the area and populations of the intersections of LAD i and GP k
for i in range(len(gdf_LAD)):
    intersection_data = LAD_GP_catchment_area_intersections[i]
    
    for k in range(len(intersection_data)):
        gp_index = intersection_data[k][0]
        int_area = intersection_data[k][1]

        LAD_area = gdf_LAD.iloc[i].area
        gp_area = gdf_catchment.iloc[gp_index].area

        int_pop = (int_area / LAD_area) * gdf_LAD.iloc[i]['all_age']
        intersection_data[k].append(int_pop)

        intersection_data[k].append(gdf_LAD['LAD_name'][i])
        intersection_data[k].append(LAD_area)
        intersection_data[k].append(gdf_catchment.iloc[gp_index].Name)
        intersection_data[k].append(gp_area)

# %% ../../nbs/core/02b_LAD_and_GP_intersections.ipynb 33
LAD_GP_catchment_area_intersections = np.array(LAD_GP_catchment_area_intersections, dtype=object)

# flatten the array structure
def flatten_comprehension(matrix):
    return [item for row in matrix for item in row]

df_LAD_GP_pop = pd.DataFrame(flatten_comprehension(LAD_GP_catchment_area_intersections), columns=['gp_index', 'intersection_size', 'intersection_pop', 'LAD_name', 'LAD_area', 'gp_name', 'gp_area'])

# %% ../../nbs/core/02b_LAD_and_GP_intersections.ipynb 36
df_LAD_GP_pop['gp_area_true'] = df_LAD_GP_pop['gp_area']
df_LAD_GP_pop['gp_area'] = np.abs(df_LAD_GP_pop['gp_area'])

df_LAD_GP_pop['percent_GP_in_LAD'] = df_LAD_GP_pop['intersection_size']/df_LAD_GP_pop['gp_area']

# %% ../../nbs/core/02b_LAD_and_GP_intersections.ipynb 39
df_LAD_GP_pop.to_csv(const.pre_output_path+'/LAD_GP_area_intersections.csv')
