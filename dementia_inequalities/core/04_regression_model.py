# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/core/04_regression_model.ipynb.

# %% auto 0
__all__ = ['df_dem_plus', 'covar_opt', 'Y_data', 'n_folds', 'cv_kfold', 'model', 'covar_comb', 'perform_by_covar', 'key_num']

# %% ../../nbs/core/04_regression_model.ipynb 4
import dementia_inequalities as proj
from .. import const, log, utils, tools
import adu_proj.utils as adutils

# %% ../../nbs/core/04_regression_model.ipynb 5
import numpy as np 
import pandas as pd 
from matplotlib import pyplot as plt
from sklearn import linear_model
from sklearn.model_selection import KFold, cross_val_score
import itertools

import scipy.stats as st

# %% ../../nbs/core/04_regression_model.ipynb 9
df_dem_plus = pd.read_csv(const.output_path+'/df_dem_plus.csv')

# %% ../../nbs/core/04_regression_model.ipynb 12
# Potential covariates 
covar_opt = ['over_65_pc', 'female_pc', 'ALevel_plus_pc', 'white_pc', 'HYP_afflicted_pc', 'DM_afflicted_pc', 'STIA_afflicted_pc', 'GP_LAD_pc']

# Outcome data 
Y_data = df_dem_plus['DEM_afflicted_pc'].values.reshape(-1,1)

# Parameters for cross validation 
n_folds = 5
cv_kfold = KFold(n_folds, random_state=13, shuffle=True)

# Model 
model = linear_model.LinearRegression()

covar_comb = {}
perform_by_covar = {}

key_num = 0
for i in range(1,9):
    for j, subset in enumerate(itertools.combinations(covar_opt, i)):
        covar_comb[key_num] = subset
        X_data = df_dem_plus[list(subset)].values.reshape(-1,i)
        # evaluate the model using 5-fold CV 
        scores = cross_val_score(model, X=X_data, y=Y_data, cv=cv_kfold)
        perform_by_covar[key_num] = np.mean(scores)
        key_num += 1
        #print('Accuracy: %.3f (%.3f)' % (np.mean(scores), np.std(scores)))
